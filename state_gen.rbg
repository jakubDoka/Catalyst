file "stages/packaging/src/state_gen.rs" {
    use "packaging_t"
    use "diags"
    use "storage"
    use "lexing"

    struct PackageLoader {
        mut Resources
        mut Workspace
        mut Interner
        mut PackageGraph
        owned token_macro_ctx: `Option<&'a0 mut TokenMacroCtx>` = "None"
    }
}

file "stages/typec/src/state_gen.rs" {
    use "storage"
    use "diags"
    use "typec_t"
    use "packaging_t"

    struct TyChecker {
        owned module: `VRef<Module>`
        owned source: `VRef<Source>` = "resources.modules[module].source"

        mut Interner
        mut Scope
        mut Typec
        mut Workspace
        Resources
    }
}

file "stages/mir/src/state_gen.rs" {
    use "storage"
    use "diags"
    use "typec_t"
    use "packaging_t"
    use "mir_t"


    struct MirChecker {
        owned module: `VRef<Module>`
        owned source: `VRef<Source>` = "resources.modules[module].source"

        mut Mir
        mut Interner
        mut Typec
        mut Workspace
        Resources
    }
}

file "stages/gen/src/state_gen.rs" {
    use "crate"
    use "storage"
    use "typec_t"
    use "packaging_t"

    struct Generator {
        mut CompileRequests
        mut GenLayouts
        mut Gen
        passed mut GenResources
        mut Interner
        mut Typec

        Resources
    }
}

file "subcommands/middleware/src/state_gen.rs" {
    use "packaging_t"

    struct Shared {
        Resources
    }
}