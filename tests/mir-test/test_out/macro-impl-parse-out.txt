error: expected '*' but got '^'
 --> macro-impl\root.ctl:1:937
  |
1 | use { "water/option" ; "water/macros/tokens" ; "water/marker" ; "water/ptr" ; } ; struct LastToken { last : MacroToken ; } ; impl Copy for LastToken ; struct TwoTokens { second : MacroToken ; first : MacroToken ; } ; impl Copy for TwoTokens ; enum SwapState { Two : TwoTokens ; Last : LastToken ; Empty ; } ; impl Copy for SwapState ; #[macro swap] ; struct Swap { state : SwapState ; lexer : MacroLexer ; } ; impl TokenMacro for Swap {     fn new(s : ^ Self, lexer : MacroLexer)     {         ptr\        write(s,\        {             state :\Two ~\            { first : lexer.next() ; second : lexer.next() ; } ; lexer ;         }) ;     } ; fn next(s : ^ Self) -> Option [MacroToken] =>\Some ~ match s.state     {        \Two ~\{ first, second }         { s.state =\Last ~\{ last : first } ; second } ;\Last ~\        { last } { s.state =\Empty ; last } ;\Empty => return\None ;     } ; fn drop(s : ^ Self) -> MacroLexer { ptr\read(^ s.lexer) } ; } ;
  |token located here
  |
  = info: list -> item -> impl -> list -> impl item -> function definition -> function body -> list -> expr -> unit expr -> call -> list -> expr -> unit expr

