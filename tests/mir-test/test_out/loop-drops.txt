error: value is possibly moved more then once
  --> loop-drops/root.ctl:8:5
   |
 8 |       loop {
   |  _____-
 9 | |         drop(a)
   |                ^ here
10 | |     }
   | |_____- info: the loop
   |
   = note: you can disable move semantics with '#[no_moves]' function attribute
   = note: nonlocal value remains moved even after loop jumps back
   = help: 'break' after the move or move the value beck before next iteration

error: move out of already moved value
  --> loop-drops/root.ctl:24:25
   |
24 |         if true => drop(a)
   |                         - info: previous move of value
25 |         else => continue
26 |         break
27 |     }
28 |     drop(a)
   |          ^ here
   |
   = note: you can disable move semantics with '#[no_moves]' function attribute

error: value is possibly moved more then once
  --> loop-drops/root.ctl:33:5
   |
33 |       loop {
   |  _____-
34 | |         if true => drop(a)
   |                           ^ here
35 | |         else => break
36 | |     }
   | |_____- info: the loop
   |
   = note: you can disable move semantics with '#[no_moves]' function attribute
   = note: nonlocal value remains moved even after loop jumps back
   = help: 'break' after the move or move the value beck before next iteration

info: mir repr of functions:
fn [] drop(var0: param0) -> ()  { (var3: param0) ret var2
    block0 {
        drop var3
        return var0
    }

}

fn [] loop_drop() -> ()  { () ret var4
    block1 {
        var5 ={}
        var6 = var5
        goto block2
    }

    block2 {
        access var6
        var8 = drop[0\A](val6)
        goto block2
    }

}

fn [] loop_break_drop() -> ()  { () ret var9
    block3 {
        var10 ={}
        var11 = var10
        goto block4
    }

    block4 {
        access var11
        var12 = drop[0\A](val11)
        goto block5
    }

    block5 {
        return var9
    }

}

fn [] linear_loop_branch_drop() -> ()  { () ret var13
    block6 {
        var14 ={}
        var15 = var14
        goto block7
    }

    block7 {
        var18 = true
        split var18 block8 block9
    }

    block8 {
        access var15
        var17 = drop[0\A](val15)
        goto block10 with var17
    }

    block9 {
        goto block7
    }

    block10 {
        goto block11
    }

    block11 {
        access var15
        var13 = drop[0\A](val15)
        return var13
    }

}

fn [] loop_branch_drop() -> ()  { () ret var19
    block12 {
        var20 ={}
        var21 = var20
        goto block13
    }

    block13 {
        var23 = true
        split var23 block14 block15
    }

    block14 {
        access var21
        var22 = drop[0\A](val21)
        goto block16 with var22
    }

    block15 {
        goto block17
    }

    block16 {
        goto block13
    }

    block17 {
        return var19
    }

}

fn [] loop_drop_and_move_in() -> ()  { () ret var24
    block18 {
        var25 ={}
        var26 = var25
        goto block19
    }

    block19 {
        var29 = true
        split var29 block20 block21
    }

    block20 {
        access var26
        var28 = drop[0\A](val26)
        goto block22 with var28
    }

    block21 {
        goto block22
    }

    block22 {
        access var26
        var26 ={}
        goto block19
    }

}



