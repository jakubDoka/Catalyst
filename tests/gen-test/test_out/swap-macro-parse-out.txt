error: expected 'struct' | 'fn' | 'spec' | 'enum' | 'impl' | '#' but got Macro
 --> swap-macro\root.ctl:1:2212
  |
1 | #[water_drop] ; enum [T] Option { None ; Some : T ; } ; struct LastToken { last : MacroToken ; } ; struct TwoTokens { second : MacroToken ; first : MacroToken ; } ; enum Swap { Two : TwoTokens ; Last : LastToken ; Empty ; } ; #[water_drop] ; struct MacroLexer { _addr : ^ () ; } ; impl MacroLexer { fn next(ml : MacroLexer) -> MacroToken => ctl_lexer_next(ml) ; } ; struct Span { start : u32 ; end : u32 ; } ; #[water_drop] ; enum MacroTokenKind {     Func ; Type ; Return ; Use ; Extern ; If ; Elif ; Else ; For ; Break ;     Continue ; Let ; Struct ; Spec ; Enum ; Mut ; Impl ; As ; Match ; Pub ;     Priv ; Const ; Comma ; Colon ; Dot ; RightArrow ; ThickRightArrow ;     DoubleColon ; Hash ; DoubleHash ; BackSlash ; DoubleDot ; Tilde ;     LeftCurly ; RightCurly ; LeftParen ; RightParen ; LeftBracket ;     RightBracket ; Label ; Ident ; Int ; String ; Bool ; Char ; Comment ;     Space ; Operator : u8 ; NewLine ; Error ; Eof ; None ; } ; struct MacroToken { kind : MacroTokenKind ; span : Span ; } ; fn "default" malloc(size : uint) -> ^ () extern ; fn "default" free(ptr : ^ ()) extern ; #[compile_time] ; fn "default" ctl_lexer_next(lexer : MacroLexer) -> MacroToken extern ; fn "default" putchar(c : char) -> u32 extern ; #[water_drop] ; spec TokenMacro {     fn "default" new() -> ^ Self ; fn "default"     start(s : ^ Self, lexer : MacroLexer) -> bool ; fn "default"     next(s : ^ Self, lexer : MacroLexer) -> Option [MacroToken] ; fn "default"     clear(s : ^ Self) ; fn "default" drop(s : ^ Self) ; } ; impl TokenMacro for Swap {     fn new() -> ^ Self     {         putchar('n') ; let val = malloc(sizeof\[Self] ()) ; putchar('a') ;         cast(val)     } ; fn start(s : ^ Self, lexer : MacroLexer) -> bool     {         * s =\Two ~\{ first : lexer.next() ; second : lexer.next() ; } ;         true     } ; fn next(s : ^ Self, lexer : MacroLexer) -> Option [MacroToken]     {         Option\Some ~ match * s         {            \Two ~\{ first, second }             { * s =\Last ~\{ last : first } ; second } ;\Last ~\            { last } { * s =\Empty ; last } ;\Empty => return\None ;         }     } ; fn clear(s : ^ Self) {} ; fn drop(s : ^ Self) => free(cast(s)) ; } ; break ; #[entry] ; swap! swap! fn -> main uint => 0 ;
  |token located here
  |
  = info: list -> item

