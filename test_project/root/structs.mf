use {
    "root/generics"
}

fn [T] move_in_and_out(arg: T) -> T {
    arg
}

fn other(a: int, b: int, c: int) -> int {
    return a + b * c
}

fn bti(b: bool) -> int {
    return if b { 1 } else { 0 }
}

fn structure_test() -> int {
    let mut something = init_something()
    something = Something::{
        a: 2
        b {
            e: true
            f: false
        }
        e: true
    }

    let something_else = init_something_else()

    if something.e {} else {
        return -1
    }

    something.a - bti(something.b.e) + -bti(something_else.f)
}

fn init_something_else() -> SomethingElse {
    SomethingElse::{ e: false; f: true }
}

fn init_something() -> Something {
    Something::{
        a: 0
        b {
            e: false
            f: false           
        }
        e: false
    }
}

struct Something {
    a: int
    b: SomethingElse
    e: bool
}

struct SomethingElse {
    e: bool
    f: bool
}

fn se() -> SomethingElse {
    SomethingElse::(false, false)
}
 
fn ownership_test() {
    let mut to = TestOwnership::(se(), se(), se())

    let res = if false {
        if true {
            to.a
        } else {
            to.b
        }
    } else {
        to.c
    }

    to = TestOwnership::(se(), se(), se())

    let a = to.a
    to.a = a
    let mut a = se()
    loop'a {
        if true {
            loop {
                {a}
                a = se()
                break'a
            }
        }
        //break'a
    }
    let b = ^a
    let a = move_in_and_out(a)
    
    let res = loop'a {
        to.a = se()
        if true {
            loop'b {
                loop {
                    if true {
                        let a = to.a
                        //to.a = se()
                        break'b a
                    }
                    continue'a
                }
            }
        }
    }

    return
}

struct TestOwnership {
    a: SomethingElse
    b: SomethingElse
    c: SomethingElse
}

impl drop as TestOwnership {
    fn drop(s: ^mut Self) {
        putchar('d')
    }
}