use {
    "root/utils"
}

fn [T] move_in_and_out(arg: T) -> T {
    arg
}

struct [T] Loo {
    field: T
    yes: bool
}

impl [T] drop as Loo[T] {
    fn drop(s: ^mut Self) {
        "Loo[T] dropped\n".log()
    }
}

struct Goo {
    afield: int
}

impl Goo {
    fn new() -> Self {
        Self::{
            afield: 10
        }
    }

    fn field(s: ^Self) -> int {
        s.afield
    }

    fn something() {}
}

impl Spec as Goo {
    use something as try

    fn and_this() {
        "and_this called\n".log()
    }
}


fn bti(b: bool) -> int {
    return if b { 1 } else { 0 }
}

fn [T: Spec] foo() -> int {
    T::try()
    T::and_this()
    T::new().field()
}

bound Spec {
    fn new() -> Self
    fn field(s: ^Self) -> int
    fn try()
    fn and_this()
}