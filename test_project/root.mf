use {
    "root/structs"
    "root/generics"
    //"root/patterns"
}

let CONSTANT = 1
let STRUCT_CONSTANT = init_something()
let mut dangerous_int = 0

#entry
fn main() -> int {
    if other(1, 2, 3) != 7 {
        return 1
    }

    if structs::bti(true) != 1 {
        return 2
    }
    
    if generics::bti(false) != 0 {
        return 3
    }

    
    if fib(5) != 8 {
        return 4
    }
    
    if iter_fib(5) != 8 {
        return 5
    }
       
    {
        let mut i = 1
        let mut b = 0
        if loop { if i > 100 {
            break b
        } else {
            b += i
            i += 1
        } } != 5050 {
            return 6
        }
    }
    
    if structure_test() != 0 {
        return 7
    }
    
    if init_something().a != 0 {
        return 8
    }
    
    if generics::move_in_and_out(0) != 0 {
        return 9
    }    
    
    if Goo::new().field() != 10 {
        return 10
    }
    
    if (*PtrTest::{ a: false; b: false; c: true }.as_ptr()).c {} else {
        return 11
    }

    if foo::[Goo]() + foo::[Goo]() != 20 {
        return 12
    }

    if Loo::{ field: ^^Loo::{ field: 90; yes: false }; yes: true }.as_ptr().field.field != 90 {
        return 13
    }
    
    let vec = ^Vec::new::[int]()
    
    let ptr = malloc(100)
    
    if ptr as int == 0 {
        return 15
    }

    /*    
    if Enum::Something::{}.is_something() {} else {
        return 16
    }
        
    if Enum::Structural::{ integer: 6 }.integer() != 6 {
        return 17
    }
    */

    if CONSTANT != 1 {
        return 18
    }

    if STRUCT_CONSTANT.a != 0 {
        return 19
    }

    dangerous_int += 1
    if dangerous_int != 1 {
        return 20 + dangerous_int
    }

    if (-1).i8().uint() != 0u - 1u {
        return 21
    }

    if (-1).u8() != 255u8 {
        return 22
    }

    let fn_ptr = fn_ptr_test

    if fn_ptr(1, 1) != 2 {
        return 23
    }

    {
        let number = -1
        let mut field_ptr_test = FieldPtrTest::(number, fn_ptr, 0)
        
        if field_ptr_test.a != -1 {
            return 24
        }

        let field_ptr = ^mut field_ptr_test.a
        *field_ptr = 10
        if field_ptr_test.a != 10 {
            return 25
        }

        field_ptr_test.set_b(10)
        if field_ptr_test.a != 10 {
            return 26
        }

        if field_ptr_test.func(3, -3) != 0 {
            return 27
        }
    }

    //ownership_test()

    let a = TestOwnership::(se(), se(), se())

    if false {
        drop_(a)
    } else {
        //putchar('k')
    }

    let a = 'h'
    let b = ^a

    putchar(40.u32() as char)
    putchar(*b)

    -34
}

fn drop_(t: TestOwnership) {

}

struct FieldPtrTest {
    a: int
    func: fn(int, int) -> int
    b: int
}

impl FieldPtrTest {
    fn set_b(s: ^mut Self, value: int) {
        s.b = value
    }
}

fn fn_ptr_test(a: int, b: int) -> int {
    a + b
}

impl [T] Loo[T] {
    fn as_ptr(s: ^Self) -> ^Self {
        s
    }
}

struct PtrTest {
    a: bool
    b: bool
    c: bool
}

impl PtrTest {
    fn as_ptr(s: ^Self) -> ^Self {
        s
    }
}

fn fib(x: int) -> int {
    if x < 2 {
        1
    } else {
        fib(x - 1) + fib(x - 2)
    }
}

fn iter_fib(x: int) -> int {
    let mut i = 1
    let mut a = 1
    let mut b = 1
    
    loop {
        if i >= x {
            break b
        }

        let c = a + b
        a = b
        b = c

        i += 1
    }
}

fn "default" exit(code: int) extern
